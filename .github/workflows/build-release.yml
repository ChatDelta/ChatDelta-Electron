name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - os: macos-latest
            platform: mac
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: win

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for macOS
        if: matrix.os == 'macos-latest'
        run: npm run build:mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build for Linux
        if: matrix.os == 'ubuntu-latest'
        run: npm run build:linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build for Windows
        if: matrix.os == 'windows-latest'
        run: npm run build:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload macOS artifacts
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v3
        with:
          name: mac-build
          path: |
            dist/*.dmg
            dist/*.zip

      - name: Upload Linux artifacts
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v3
        with:
          name: linux-build
          path: |
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm

      - name: Upload Windows artifacts
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v3
        with:
          name: windows-build
          path: |
            dist/*.exe
            dist/*.msi

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: release-artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ChatDelta ${{ github.ref }}
          body: |
            ## ChatDelta Release
            
            ### Downloads
            - **Windows**: Download the `.exe` installer
            - **macOS**: Download the `.dmg` or `.app.zip` file
            - **Linux**: Download the `.AppImage`, `.deb`, or `.rpm` file
            
            ### Installation
            - **Windows**: Run the `.exe` installer
            - **macOS**: Open the `.dmg` and drag ChatDelta to Applications
            - **Linux**: Make the `.AppImage` executable and run it, or install the `.deb`/`.rpm` package
            
            See the [README](https://github.com/ChatDelta/ChatDelta-Electron#readme) for configuration instructions.
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs').promises;
            const path = require('path');
            
            const releaseId = ${{ steps.create_release.outputs.id }};
            const artifactsDir = 'release-artifacts';
            
            async function uploadAssets(dir) {
              const files = await fs.readdir(dir, { withFileTypes: true });
              
              for (const file of files) {
                const filePath = path.join(dir, file.name);
                
                if (file.isDirectory()) {
                  await uploadAssets(filePath);
                } else if (file.name.match(/\.(dmg|zip|exe|msi|AppImage|deb|rpm)$/)) {
                  console.log(`Uploading ${file.name}`);
                  const data = await fs.readFile(filePath);
                  
                  await github.rest.repos.uploadReleaseAsset({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    release_id: releaseId,
                    name: file.name,
                    data: data
                  });
                }
              }
            }
            
            await uploadAssets(artifactsDir);