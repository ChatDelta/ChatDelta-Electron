name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - os: macos-latest
            platform: mac
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: win

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm

      - name: Install dependencies
        run: npm install

      - name: Build for macOS
        if: matrix.os == 'macos-latest'
        run: |
          npm run build:mac || true
          ls -la dist/ || echo "No dist directory"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: Build for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          npm run build:linux || true
          ls -la dist/ || echo "No dist directory"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build for Windows
        if: matrix.os == 'windows-latest'
        run: |
          npm run build:win || true
          dir dist || echo "No dist directory"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload macOS artifacts
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: mac-build
          path: dist/
          if-no-files-found: warn

      - name: Upload Linux artifacts
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: dist/
          if-no-files-found: warn

      - name: Upload Windows artifacts
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: dist/
          if-no-files-found: warn

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Create Release and Upload Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if release exists, delete if it does (for re-runs)
          gh release view ${{ github.ref_name }} && gh release delete ${{ github.ref_name }} -y || true
          
          # Create release
          gh release create ${{ github.ref_name }} \
            --title "ChatDelta ${{ github.ref_name }}" \
            --notes "## ChatDelta Release

          ### Downloads
          - **Windows**: Download the \`.exe\` installer
          - **macOS**: Download the \`.dmg\` or \`.app.zip\` file
          - **Linux**: Download the \`.AppImage\`, \`.deb\`, or \`.rpm\` file

          ### Installation
          - **Windows**: Run the \`.exe\` installer
          - **macOS**: Open the \`.dmg\` and drag ChatDelta to Applications
          - **Linux**: Make the \`.AppImage\` executable and run it, or install the \`.deb\`/\`.rpm\` package

          See the [README](https://github.com/ChatDelta/ChatDelta-Electron#readme) for configuration instructions."

          # Upload all artifacts
          find release-artifacts -type f \( -name "*.dmg" -o -name "*.zip" -o -name "*.exe" -o -name "*.msi" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" \) -exec gh release upload ${{ github.ref_name }} {} \;